" Enable folding
" vim:fdm=marker

" BASIC OPTIONS {{{

" Be in the 21st century already
set nocompatible
filetype plugin indent on
syntax enable
set encoding=utf-8
set noerrorbells 

" Don't change default (terminal) cursor
set guicursor=

" Count lines relative to the current one
set number
set relativenumber

" Start scrolling before you reach the margins
set scrolloff=8

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=100

" Dedicate one more line to displaying messages
set cmdheight=2

" Indentation {{{

" Don't bother me with manual indentation
set autoindent
set smartindent
set cindent

" Tabs shall be spaces
set expandtab

" 4 space indent should do
set tabstop=4
set shiftwidth=4

" Split lines longer than 80 characters
set wrap
set textwidth=80
set linebreak

" More convenience with tabs
set smarttab

" }}}

" Searching {{{

" Highlight text during search
set incsearch

" ...but remove the highlight after you're done
set nohlsearch

" Don't do case-sensitive searching, unless there are capital letters
set ignorecase
set smartcase

" }}}

" Buffers {{{ 

" Keep any buffers around in the background
set hidden

" No backups, of any kind, whatsoever
set noswapfile
set nobackup

" }}}

" }}}

" PLUGINS {{{

" Plugins (with Vundle) {{{

" Set runtime path to include Vundle and initialize
set rtp+=$XDG_CONFIG_HOME/vim/bundle/Vundle.vim
call vundle#begin('$XDG_CONFIG_HOME/vim/bundle')

" NOTE: Be careful, as too many plugins will slow vim down!

" let Vundle manage Vundle, required:
Plugin 'VundleVim/Vundle.vim'
" Bright theme with pastel colors:
Plugin 'morhetz/gruvbox'
" Lean status/tabline for vim:
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
" Quickly comment out multile lines:
Plugin 'preservim/nerdcommenter'
" File browser
Plugin 'preservim/nerdtree'
" Code autocompletion:
Plugin 'neoclide/coc.nvim'
" Find files quickly:
Plugin 'junegunn/fzf'
Plugin 'junegunn/fzf.vim'
" Syntax highlighting for Javascript:
Plugin 'pangloss/vim-javascript'
" Syntax highlighting for C++:
Plugin 'octol/vim-cpp-enhanced-highlight'
" Plugin for visually displaying indent levels:
Plugin 'nathanaelkane/vim-indent-guides'
" Basically, a more conservative version of vim auto-pairs
Plugin 'rstacruz/vim-closer'

" add plugins only above this line
call vundle#end()

" }}}

" NERDTree {{{

nnoremap <C-t> :NERDTreeToggle<CR>

" }}}

" fzf {{{

" Jump to the existing window if possible
let g:fzf_buffers_jump = 1

" Use CTRL-f to open FZF quickly
nnoremap <C-f> :FZF ~<cr>

" }}}

" coc.nvim {{{
" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nnoremap <silent> [g <Plug>(coc-diagnostic-prev)
nnoremap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nnoremap <silent> gd <Plug>(coc-definition)
nnoremap <silent> gy <Plug>(coc-type-definition)
nnoremap <silent> gi <Plug>(coc-implementation)
nnoremap <silent> gr <Plug>(coc-references)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Integrate coc.nvim with Airline
let g:airline#exxtensions#coc#enabled = 1

" }}}

" C++ syntax highlighting {{{

let g:cpp_class_scope_highlight = 1
let g:cpp_member_variable_highlight = 1
let g:cpp_class_decl_highlight = 1
let g:cpp_concepts_highlight = 1
let c_no_curly_error = 1

" }}}

" Javascript highlighting {{{

let g:javascript_plugin_jsdoc = 1
let g:javascript_plugin_ngdoc = 1
let g:javascript_plugin_flow = 1

" }}}

" Indent Guides {{{

let g:indent_guides_enable_on_vim_startup = 1

" Only one character long
let g:indent_guides_guide_size = 1

" }}}

" }}}

" LOOK AND FEEL {{{

" Enable true colour in the terminal
set termguicolors

" Statusline takes care of displaying the mode already
set noshowmode

" Remove the visual delay when switching between modes
set ttimeoutlen=10

" Theme (Gruvbox) options {{{

set background=dark
let g:gruvbox_italic=1
let g:gruvbox_bold=1
let g:gruvbox_contrast_dark = 'soft'

" At last, invoke Gruvbox
colorscheme gruvbox

" }}}

" Airline options {{{

let g:airline_theme = 'base16'

" Separators for empty sections look horrifying
let g:airline_skip_empty_sections = 1

" Always show tabs, no matter what
let g:airline#extensions#tabline#enabled = 1

" Sweet, sweet powerline fonts
let g:airline_powerline_fonts = 1

" Symbols {{{
" Define custom symbols
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = '☰'
let g:airline_symbols.maxlinenr = ''
let g:airline_symbols.dirty='⚡'

" }}}

" Statusline {{{

" Put statuslinea at the bottom
let g:airline_statusline_ontop = 0

" Define statusline. Uses vim's inbuilt statusline syntax
"let g:airline_section_a = ''
"let g:airline_section_b = ''
"let g:airline_section_c = ''
let g:airline_section_x = '%Y'
"let g:airline_section_y = ''
"let g:airline_section_z = ''

" }}}

" }}}

" }}}

" KEY BINDINGS {{{

let mapleader = " "
" Quick access to vimrc
nnoremap <leader>ev :vsplit $MYVIMRC<CR>
nnoremap <C-s> :source $MYVIMRC<CR>

" Disable arrow keys
inoremap <up> <NOP>
inoremap <down> <NOP>
inoremap <left> <NOP>
inoremap <right> <NOP>
nnoremap <up> <NOP>
nnoremap <down> <NOP>
nnoremap <left> <NOP>
nnoremap <right> <NOP>

" Quickly switch between windows
nnoremap <leader>h :wincmd h<CR>
nnoremap <leader>j :wincmd j<CR>
nnoremap <leader>k :wincmd k<CR>
nnoremap <leader>l :wincmd l<CR>

" }}}

" ABBREVIATIONS {{{

inoreab #i #include
inoreab #d #define

" }}}

" Set custom path for viminfo 
if has("nvim")
    set shada='50,<1000,s100,:0,n$XDG_CONFIG_HOME/vim/nviminfo
else
    set viminfo='50,<1000,s100,:0,n$XDG_CONFIG_HOME/vim/viminfo.vim
endif
