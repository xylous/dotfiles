" Enable folding in vimrc
" vim:fdm=marker

" BASIC OPTIONS {{{
" Be in the 21st century already
set nocompatible
filetype plugin indent on
syntax enable
set encoding=utf-8
set noerrorbells 

" Don't change default (terminal) cursor
set guicursor=

" Count lines relative to the current one
set number
set relativenumber

" Start scrolling before you reach the margins
set scrolloff=8

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=100

" Dedicate one more line to displaying messages
set cmdheight=2

" Always display a vertical bar on the left; if there are any errors deteced by
" language servers, they'll show there
set signcolumn=yes

" INDENTATION {{{
" Don't bother me with manual indentation
set autoindent
set smartindent
set cindent

" Tabs shall be spaces
set expandtab

" 4 space indent should do
set tabstop=4
set shiftwidth=4
set softtabstop=4

" Split lines longer than 80 characters
set wrap
set textwidth=80
set linebreak

" More convenience with tabs
set smarttab
" }}}
" SEARCHING {{{
" Highlight text during search
set incsearch

" ...but remove the highlight after you're done
set nohlsearch

" Don't do case-sensitive searching, unless there are capital letters
set ignorecase
set smartcase
" }}}
" BUFFERS {{{ 
" Keep any buffers around in the background
set hidden

" No backups, of any kind, whatsoever
set noswapfile
set nobackup
" }}}
" }}}
" PLUGINS {{{
" Plugins (with Vundle) {{{
" Set runtime path to include Vundle and initialize
set rtp+=$XDG_CONFIG_HOME/vim/bundle/Vundle.vim
call vundle#begin('$XDG_CONFIG_HOME/vim/bundle')
" NOTE: Be careful, as too many plugins will slow vim down!
" let Vundle manage Vundle, required:
Plugin 'VundleVim/Vundle.vim'
" Lean status/tabline for vim:
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
" Quickly comment out multile lines:
Plugin 'preservim/nerdcommenter'
" Code autocompletion:
Plugin 'neoclide/coc.nvim'
" Snippets for coc-snippets:
Plugin 'honza/vim-snippets'
" Find files quickly:
Plugin 'junegunn/fzf.vim'
" Syntax highlighting for a lot of languages:
Plugin 'sheerun/vim-polyglot'
" Plugin for visually displaying indent levels:
Plugin 'nathanaelkane/vim-indent-guides'
" Basically, a more conservative version of vim-auto-pairs:
Plugin 'rstacruz/vim-closer'
" Display a git diff in the sign column on the left:
Plugin 'airblade/vim-gitgutter'
" Colorscheme
Plugin 'ayu-theme/ayu-vim'
" add plugins only above this line
call vundle#end()
" }}}
" fzf {{{
" Jump to the existing window if possible
let g:fzf_buffers_jump = 1
let g:fzf_command_prefix = "FZF"

" Use CTRL-f to open FZF quickly, in the home directory
nnoremap <C-f> :FZFFiles ~<cr>
" }}}
" coc.nvim {{{
" Use <tab> for trigger completion, completion confirm, snippet expand
inoremap <silent><expr> <TAB>
      \ pumvisible() ? coc#_select_confirm() :
      \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()

function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nnoremap <silent> [g <Plug>(coc-diagnostic-prev)
nnoremap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nnoremap <silent> gd <Plug>(coc-definition)
nnoremap <silent> gy <Plug>(coc-type-definition)
nnoremap <silent> gi <Plug>(coc-implementation)
nnoremap <silent> gr <Plug>(coc-references)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" List of extensions
let g:coc_global_extensions = ['coc-json', 'coc-tsserver', 'coc-snippets', 'coc-clangd', 'coc-sh']

" Integrate coc.nvim with Airline
let g:airline#exxtensions#coc#enabled = 1

" Use CTRL-J and CTRL-K to navigate up and down the list of snippets
let g:coc_snippet_next = '<C-j>'
let g:coc_snippet_prev = '<C-k>'
" Use <C-j> for jump to next placeholder, it's default of coc.nvim
let g:coc_snippet_next = '<c-j>'

" Use <C-k> for jump to previous placeholder, it's default of coc.nvim
let g:coc_snippet_prev = '<c-k>'
" }}}
" Indent Guides {{{
let g:indent_guides_enable_on_vim_startup = 1

" Only one character long
let g:indent_guides_guide_size = 1
" }}}
" GitGutter {{{
let g:gitgutter_map_keys = 0
" }}}
" }}}
" LOOK AND FEEL {{{
" Assume this is a 256-colour-capable terminal
set t_Co=256

" Enable 24-bit true colour for nvim (vim doesn't seem to support it for me)
if has("nvim")
    set termguicolors
endif

" Statusline takes care of displaying the mode already
set noshowmode

" Remove the visual delay when switching between modes
set ttimeoutlen=10

set background=dark
let ayucolor="dark"

" At last, set the theme
colorscheme ayu

" AIRLINE {{{
let g:airline_theme = 'ayu_dark'

" Separators for empty sections look horrifying
let g:airline_skip_empty_sections = 1

" Always show tabs, no matter what
let g:airline#extensions#tabline#enabled = 1

" Sweet, sweet powerline fonts
let g:airline_powerline_fonts = 1

" Define custom symbols
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = '☰'
let g:airline_symbols.maxlinenr = ''
let g:airline_symbols.dirty='⚡'

" Put statusline at the bottom
let g:airline_statusline_ontop = 0

" Define statusline. Uses vim's inbuilt statusline syntax
"let g:airline_section_a = ''
"let g:airline_section_b = ''
"let g:airline_section_c = ''
let g:airline_section_x = '%Y'
"let g:airline_section_y = ''
"let g:airline_section_z = ''
" }}}
" }}}
" KEY BINDINGS {{{
" Use space as leader key
let mapleader = ' '
" Quick access to vimrc
nnoremap <leader>ev :vsplit $MYVIMRC<CR>
nnoremap <C-s> :source $MYVIMRC<CR>

" Disable arrow keys
inoremap <up> <NOP>
inoremap <down> <NOP>
inoremap <left> <NOP>
inoremap <right> <NOP>
nnoremap <up> <NOP>
nnoremap <down> <NOP>
nnoremap <left> <NOP>
nnoremap <right> <NOP>

" Quickly switch between windows
nnoremap <leader>h :wincmd h<CR>
nnoremap <leader>j :wincmd j<CR>
nnoremap <leader>k :wincmd k<CR>
nnoremap <leader>l :wincmd l<CR>

inoremap <C-c> <NOP>
vnoremap <C-c> <NOP>

" If the filename under cursor doesn't exist, create it and then go to it
nnoremap <leader>gf :e <cfile><cr>

" Unbind backspace in insert mode and delete key. Use dw or db or x in normal mode
inoremap <BS> <NOP>
noremap <DEL> <NOP>
" }}}
" FILETYPE-SPECIFIC OPTIONS {{{
augroup MARKDOWN_OPTIONS
    autocmd BufWinEnter *.md setlocal foldmethod=manual
    autocmd BufWinLeave *.md mkview
    autocmd BufWinEnter *.md silent! loadview
augroup END
" }}}

" Set custom path for viminfo 
if has("nvim")
    set shada='50,<1000,s100,:0,n$XDG_CACHE_HOME/vim/nviminfo
else
    set viminfo='50,<1000,s100,:0,n$XDG_CACHE_HOME/vim/viminfo.vim
endif
