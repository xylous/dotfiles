#!/usr/bin/bash

# Take a screenshot and put it into "${SCREENSHOTS_DIR}"
# default is to select the area you want to screenshot
# -a or --all to capture the entire screen

readonly SCREENSHOTS_DIR="${HOME}/docs/screenshots"
readonly SAVED_SCREENSHOTS_DIR="${SCREENSHOTS_DIR}/saved"
readonly LAST_SCREENSHOT_FILE="${SCREENSHOTS_DIR}/.last-screenshot"
readonly NUM_SCREENSHOTS=10

###
# Print all given arguments to stderr
###
function echoerr()
{
    cat <<< "$@" 1>&2
}

###
# Return the padding zeroes necessary for filenames of equal length
# Arguments:    $1 the screenshot number
###
function padding_zeroes()
{
    for i in $(seq $((${#NUM_SCREENSHOTS} - ${#1}))); do
        echo -n "0"
    done
}

###
# Remove the screenshot indexed `$NUM_SCREENSHOTS` - 1 and move every other one
# forwards, so that the files are always in order, screenshot 1 being the most
# recent and `$NUM_SCREENSHOTS` - 1 being the oldest
###
function increment_screenshots()
{
    local max="$((${NUM_SCREENSHOTS} - 1))"
    for ss in $(seq 0 "${max}" | sort -nr); do
        local increment="$(("${ss}" + 1))"
        local original="${SCREENSHOTS_DIR}/$(padding_zeroes ${ss})${ss}.png"
        local new="${SCREENSHOTS_DIR}/$(padding_zeroes ${increment})${increment}.png"
        if [[ -f "${original}" ]]; then
            mv "${original}" "${new}"
        fi
    done
}

###
# Use scrot to take a screenshot (default: select)
# Arguments:    $1 "-a" or "--all" flag, to capture the entire screen
###
function screenshot()
{
    local screenshot="${SCREENSHOTS_DIR}/$(padding_zeroes 0)0.png"

    if [[ "$1" == "-a" ]] || [[ "$1" == "--all" ]]; then
        scrot --overwrite "${screenshot}"
    else
        scrot --overwrite --select --freeze --silent "${screenshot}"
    fi

    xclip -selection clipboard -t image/png -i "${screenshot}" \
        && increment_screenshots
}

###
# Rename a screenshot and put it into "${SAVED_SCREENSHOTS_DIR}", if the user
# confirms that it's the correct photo
# Arguments:    $1 the screenshot number, or `last`
#               $2 the title of the saved screenshot
###
function save()
{
    local num="$1"
    local new_title="$2"


    if [[ "${num}" == "last" ]]; then
        num=1
    fi

    local screenshot_path="${SCREENSHOTS_DIR}/${num}.png"
    local saved_screenshot_path="${SAVED_SCREENSHOTS_DIR}/${new_title}.png"

    if [[ ! -f "${screenshot_path}" ]]; then
        echoerr "couldn't save screenshot '${num}' - it does not exist"
    elif [[ -z "${new_title}" ]]; then
        echoerr "couldn't save screenshot: invalid (empty) title"
    else
        feh "${screenshot_path}"
        echo "Save this screenshot with title '${new_title}'?"
        select yn in "Yes" "No"; do
            case "${yn}" in
                Yes) cp "${screenshot_path}" "${saved_screenshot_path}" ;;
                No) ;;
            esac
            exit 0
        done
    fi

    exit 1
}

function help()
{
cat <<EOF
Usage: screenshot [-a | --all | help | -h | --help]
       screenshot save <num> <title>

By default, the program stores screenshots in a buffer, 1-indexed, of size 10.
Screenshots are stored in a given directory (by default: ~/docs/screenshots),
with 1.png always being the most recent, 2 always being the secondmost recent
and so on and so forth.

Under the hood, it uses scrot. If ran with no arguments, then it will prompt the
user to select an area. If ran with '-a' or '--all' options, the entire screen
is captured. In both cases, the resulting screenshot is copied to clipboard.

If ran with the 'save' command, then you must provide the number of the screenshot
you want to save (0-9) and the title it should be saved under. The photo is
viewed with 'feh' and you are prompted to confirm that it's the correct
screenshot. Note that specifying "last" as a screenshot number matches the last
screenshot taken.
EOF
}

function main()
{
    if [[ ! -d "${SCREENSHOTS_DIR}" ]]; then
        mkdir -p "${SCREENSHOTS_DIR}"
        mkdir -p "${SAVED_SCREENSHOTS_DIR}"
        echo "0" >"${LAST_SCREENSHOT_FILE}"
    fi
    if [[ "$1" =~ ("help"|"-h"|"--help") ]]; then
        help
    elif [[ "$1" == "save" ]]; then
        save "$2" "$3"
    else
        screenshot "$1"
    fi
}

main "$@"
