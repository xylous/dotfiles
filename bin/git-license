#!/usr/bin/env bash

### git-license, by xylous (xylous.e@gmail.com)

# Add a LICENSE file to the project that is specified by the user
# If none was specified, or if the license's name is invalid, then print an
# error and exit

# The directory containing the `.git` folder (project's root directory)
readonly GIT_PROJECT_ROOT="$(git rev-parse --show-toplevel 2>/dev/null)"
# The path the downloaded license is going to be written to
readonly LICENSE_DEST="${GIT_PROJECT_ROOT}/LICENSE"
# The URI of the remote we're fetching licenses from
readonly REMOTE_LICENSE_REPO='https://raw.github.com/xylous/repo-template/master/licenses/'

# Print arguments to stderr, prefixed with `error: `
function echoerr()
{
    cat <<< "error: $@" 1>&2
}

function main()
{
    # if it's empty, then we're not in a git repository
    if [[ -z "${GIT_PROJECT_ROOT}" ]]; then
        echoerr "not in a git repository"
        return 1
    fi

    # Uppercase is uneccessary
    local license="$(tr '[:upper:]' '[:lower:]' <<<"$1")"

    if [[ -z "${license}" ]]; then
        echoerr "expected one argument: license's name"
        return 1
    fi

    echo "Fetching license from remote..."

    fetch_license "${license}"
    local license_text="${REPLY}"

    if ! is_valid_license "${license_text}"; then
        echoerr "couldn't find license: '$1'"
        return 1
    fi

    replace_placeholders "${license_text}"
    local final_text="${REPLY}"
    echo "${final_text}" >"${LICENSE_DEST}" \
        && echo "Successfully added '$1' license"
}

# Download a license from the remote, ignoring errors, and put it into "$REPLY"
function fetch_license()
{
    local license="$1"
    typeset -g REPLY="$(curl -L "${REMOTE_LICENSE_REPO}/${license}.txt" 2>/dev/null)"
}

# Return 0 if the response from the remote "$1" is a valid license, 1 otherwise
function is_valid_license()
{
    local license_text="$1"
    # Licenses are usually longer than one line. If it's one line or none, then we
    # know we received an error
    if (($(wc -l <<<"${license_text}") > 1)); then
        return 0
    else
        return 1
    fi
}

# Given license text "$1", replace all known placeholders within it
function replace_placeholders()
{
    local license_text="$1"

    local year="$(date +%Y)"
    local user_name="$(git config --global --get user.name)"
    local user_email="$(git config --global --get user.email)"

    typeset -g REPLY="$(sed -e "s/{{YEAR}}/${year}/" \
        -e "s/{{NAME}}/${user_name}/" \
        -e "s/{{EMAIL}}/${user_email}/" \
        <<<"${license_text}")"
}

main "$@"
