#!/usr/bin/env bash

### git-readme, by xylous (xylous.e@gmail.com)

# Fetch a template README into the project's root directory and edit it

# The directory containing the `.git` folder (project's root directory)
readonly GIT_PROJECT_ROOT="$(git rev-parse --show-toplevel 2>/dev/null)"
# The path the README template is written to
readonly README_DEST="${GIT_PROJECT_ROOT}/README.md"
# URI to get the README contents from
readonly REMOTE_README_URI='https://raw.github.com/xylous/repo-template/master/template_readme.md'

# Print arguments to stderr, prefixed with `error: `
function echoerr()
{
    cat <<< "error: $@" 1>&2
}

function main()
{
    # if it's empty, then we're not in a git repository
    if [[ -z "${GIT_PROJECT_ROOT}" ]]; then
        echoerr "not in a git repository"
        return 1
    fi

    if [[ -f "${README_DEST}" ]]; then
        echo -n "warning: "
        echo "found an already existing README.md for the project"
        echo -n "         "
        echo "if you really want to overwrite it, delete that file first"
        return 0
    fi

    echo "Fetching template README..."
    fetch_readme_content
    local contents="${REPLY}"

    replace_placeholders "${contents}"
    local final_text="${REPLY}"
    echo "${final_text}" >"${README_DEST}"

    edit_readme_template

    echo "Successfully added a README.md"
}

function fetch_readme_content()
{
    local contents="$(curl -Ls "${REMOTE_README_URI}")"
    typeset -g REPLY="${contents}"
}

function replace_placeholders()
{
    local contents="$1"
    local project_name="$(basename ${GIT_PROJECT_ROOT})"
    typeset -g REPLY="$(sed \
        -e "s/{{PROJECT-NAME}}/${project_name}/" \
        <<<"${contents}")"
}

function edit_readme_template()
{
    local -a editors=("${EDITOR}" "${VISUAL}" "nvim" "vim" "vi" "emacs")
    for editor in "${editors[@]}"; do
        if command -v "${editor}"; then
            "${editor}" "${README_DEST}"
            break
        fi
    done
}

main "$@"
